{"version":3,"sources":["components/Deck.jsx","pages/CardGameView.jsx","App.js","index.js"],"names":["DeckContext","React","createContext","Card","img","buttonTextLike","buttonTextDislike","children","useContext","Error","className","src","alt","CardButton","type","ariaText","context","disabled","cardIndex","cardStack","length","onClick","animateCard","index","active","mx","toLowerCase","containerWidth","xDir","immediate","setTransforms","r","s","Deck","cards","onEmpty","onChange","onLike","onDislike","onCardout","onAnimation","LoaderComponent","transformStartValues","transformEndValues","springConfigs","yOffset","maxVelocity","debounceTime","rotationFactor","fadeEffect","cardSizeOnHover","rotationThreshold","minStackLength","deckRef","useRef","useState","Set","flippedOutCards","currentCardIndex","setCurrentCardIndex","setCardStack","_containerWidth","setContainerWidth","useLayoutEffect","current","width","parentElement","getBoundingClientRect","from","i","x","y","scale","rot","rotation","opacity","delay","to","cardStackLength","cardActive","config","stiff","cardFlyOut","molasses","cardDefault","slow","cardReset","gentle","useSprings","animationProps","springsApi","useEffect","start","currentCard","Math","abs","startingValues","get","number","in_min","in_max","out_min","out_max","distanceFromCenter","parseFloat","toFixed","calcOpacityChange","add","isFlippedOutCard","has","t","setTimeout","clearTimeout","filter","card","indexOf","dirX","onCardOut","bindGesture","useDrag","args","movement","direction","vx","velocity","clear","Provider","value","currentDeckSize","map","div","ref","style","touchAction","transform","interpolate","fakeData","id","Loader","CardGameView","setCards","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.048fc22d.chunk.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useEffect,\n  useLayoutEffect,\n  useContext,\n} from \"react\";\nimport {\n  useSprings,\n  animated,\n  to as interpolate,\n  config,\n} from \"@react-spring/web\";\nimport { useDrag } from \"@use-gesture/react\";\nimport \"./react-swipestack-cards.css\";\n\n// Context only available inside Deck component\nconst DeckContext = React.createContext({});\n\n// CARD COMPONENT\nfunction Card({\n  img,\n  buttonTextLike = \"like\",\n  buttonTextDislike = \"dislike\",\n  children,\n}) {\n  const context = useContext(DeckContext);\n  if (!context) {\n    throw new Error(`Card Components need to be inside of the Deck component`);\n  }\n\n  return (\n    <>\n      <img\n        className=\"react-swipestack-cards__card-img\"\n        src={img.src}\n        alt={img.alt}\n      />\n      {children}\n      <div className=\"react-swipestack-cards__button-wrapper\">\n        <CardButton type={\"dislike\"}>{buttonTextDislike}</CardButton>\n        <CardButton type={\"like\"}>{buttonTextLike}</CardButton>\n      </div>\n    </>\n  );\n}\n\nfunction CardButton({ type, ariaText, children }) {\n  ariaText = ariaText || type;\n\n  const context = useContext(DeckContext);\n  if (!context) {\n    throw new Error(`Card Components need to be inside of the Deck component`);\n  }\n\n  return (\n    <button\n      aria-label={ariaText}\n      className={`react-swipestack-cards__button-${type}`}\n      disabled={context.cardIndex !== context.cardStack.length - 1}\n      onClick={() =>\n        context.animateCard({\n          index: context.cardIndex,\n          active: true,\n          mx:\n            type.toLowerCase() === \"like\"\n              ? context.containerWidth + 200\n              : -(context.containerWidth + 200),\n          xDir: type.toLowerCase() === \"like\" ? 1 : -1,\n          immediate: true,\n        })\n      }\n    >\n      {children}\n    </button>\n  );\n}\n// This is being used down there in the view\n// interpolates rotation and scale into a css transform\nconst setTransforms = (r, s) =>\n  `perspective(1500px) rotateZ(${r}deg) scale(${s})`;\n\n// helper function to map values\nfunction mapToRange(number, in_min, in_max, out_min, out_max) {\n  return (\n    ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n  );\n}\nconst calcOpacityChange = (x, i, containerWidth, cardStackLength) => {\n  const startingValues = (i + 1) / cardStackLength;\n  if (x.get === \"function\") {\n    x = x.get();\n  } else {\n    // if card not moving\n    return startingValues;\n  }\n  // distance from card stack center\n  const distanceFromCenter = Math.abs((x / 100) * (i + 1));\n  // when card is outside of container\n  const inMax = containerWidth / 2;\n  return (\n    startingValues +\n    parseFloat(mapToRange(distanceFromCenter, 0, inMax, 0, 1).toFixed(2)) +\n    0.1\n  );\n};\n\n// DECK COMPONENT\nfunction Deck({\n  children,\n  cards,\n  containerWidth,\n  onEmpty,\n  onChange,\n  onLike,\n  onDislike,\n  onCardout,\n  onAnimation,\n  LoaderComponent,\n  transformStartValues = {},\n  transformEndValues = {},\n  springConfigs = {},\n  yOffset = 10,\n  maxVelocity = 0.2,\n  debounceTime = 100,\n  rotationFactor = 1,\n  fadeEffect = true,\n  cardSizeOnHover = 1.02,\n  rotationThreshold = 50,\n  minStackLength = 1,\n}) {\n  const deckRef = useRef();\n  const [flippedOutCards] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [currentCardIndex, setCurrentCardIndex] = useState(cards.length); // holds the Index of the current Card\n  const [cardStack, setCardStack] = useState(cards); // holds all cards data\n  const [_containerWidth, setContainerWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    if (!deckRef.current) return;\n    // if no container width is available set width to parent element width\n    if (!containerWidth) {\n      const { width } = deckRef.current.parentElement.getBoundingClientRect();\n      setContainerWidth(width);\n    }\n  }, [containerWidth]);\n\n  // FIXME DELAY\n  // These two are just helpers, they curate spring data, values that are later being interpolated into css\n  const from = (i) => ({\n    x: transformStartValues.x ? transformStartValues.x : 0,\n    y: transformStartValues.y ? transformStartValues.y : 0,\n    scale: transformStartValues.scale ? transformStartValues.scale : 1.08,\n    rot: transformStartValues.rotation ? transformStartValues.rotation : 0,\n    opacity: transformStartValues.opacity ? transformStartValues.opacity : 1,\n    delay: transformStartValues.delay ? i * transformStartValues.delay : 0,\n  });\n\n  const to = (i, cardStackLength, currentCardIndex) => ({\n    x: transformEndValues.x ? transformEndValues.x : 0,\n    y: ((i % cardStackLength) - currentCardIndex) * yOffset,\n    scale: transformEndValues.scale ? transformEndValues.scale : 1,\n    rot: transformEndValues.rotation ? transformEndValues.rotation : 0,\n    opacity: transformEndValues.opacity ? transformEndValues.opacity : 1,\n    delay: transformEndValues.delay ? i * transformEndValues.delay : i * 10,\n  });\n\n  // set config for different spring animations\n  springConfigs = {\n    cardActive: springConfigs.cardActive\n      ? springConfigs.cardActive\n      : config.stiff,\n    cardFlyOut: springConfigs.cardFlyOut\n      ? springConfigs.cardFlyOut\n      : config.molasses,\n    cardDefault: springConfigs.cardDefault\n      ? springConfigs.cardDefault\n      : config.slow,\n    cardReset: springConfigs.cardReset\n      ? springConfigs.cardReset\n      : config.gentle,\n  };\n\n  // Create a bunch of springs using the helpers above\n  const [animationProps, springsApi] = useSprings(cardStack.length, (i) => ({\n    ...to(i, cardStack.length, currentCardIndex),\n    from: from(i),\n  }));\n\n  // Trigger events\n  const onCardOut = (index, dirX) => {\n    if (dirX > 0) {\n      typeof onLike === \"function\" && onLike(cardStack[index]);\n    } else {\n      typeof onDislike === \"function\" && onDislike(cardStack[index]);\n    }\n    typeof onCardout === \"function\" && onCardout(cardStack[index]);\n  };\n\n  // Move Cards down evertime one gets flipped out\n  useEffect(() => {\n    springsApi.start((i) => ({\n      to: to(i, cardStack.length, currentCardIndex),\n      config: springConfigs.cardReset,\n    }));\n  }, [springsApi, cardStack, currentCardIndex]);\n\n  // When card prop changes update stack\n  useEffect(() => {\n    setCurrentCardIndex(cards.length);\n    setCardStack(cards);\n  }, [cards]);\n\n  // trigger onChange event when card stack changes\n  useEffect(() => {\n    typeof onChange === \"function\" &&\n      onChange({\n        currentCard: cardStack[currentCardIndex - 1],\n        cardStack,\n      });\n  }, [cardStack]);\n\n  const animateCard = ({ index, active, mx, xDir, immediate }) => {\n    let y = 0;\n    let opacity = 0;\n    springsApi.start((i) => {\n      // Move previous Cards down\n      if (index !== i) {\n        y =\n          Math.abs((mx / 100) * (i + 1)) +\n          ((i % cardStack.length) - currentCardIndex) * yOffset;\n\n        if (fadeEffect)\n          opacity = calcOpacityChange(mx, i, _containerWidth, cardStack.length);\n\n        // If Card is active return translated y value\n        if (active)\n          return {\n            y,\n            opacity: fadeEffect ? opacity : 1,\n          };\n        // If Card is NOT active return normal position in stack\n\n        return {\n          y: ((i % cardStack.length) - currentCardIndex) * yOffset,\n          opacity: 1,\n        };\n      }\n\n      // Only change spring-data for the current spring\n\n      if (immediate) {\n        flippedOutCards.add(index);\n      }\n\n      const isFlippedOutCard = flippedOutCards.has(index);\n      const x = isFlippedOutCard\n        ? (200 + _containerWidth) * xDir\n        : active\n        ? mx\n        : 0; // When a card is a flippedOutCard it flys out left or right, otherwise goes back to zero\n      const rot =\n        x > rotationThreshold || x < -rotationThreshold\n          ? (mx / 100) * rotationFactor + (isFlippedOutCard ? xDir * 10 : 0)\n          : 0; // How much the card tilts\n      const scale = active ? cardSizeOnHover : 1; // Active cards lifts up a bit\n\n      if (isFlippedOutCard) {\n        const t = setTimeout(() => {\n          clearTimeout(t);\n          setCurrentCardIndex(index);\n          setCardStack(cards.filter((card) => cards.indexOf(card) < index));\n          onCardOut(index, x);\n        }, debounceTime);\n      }\n\n      if (typeof onAnimation == \"function\")\n        onAnimation({\n          x,\n          rotation: rot,\n          scale,\n        });\n\n      // return spring data for current card\n      return {\n        x,\n        rot,\n        scale,\n        opacity: 1,\n        delay: 0,\n        config: active\n          ? springConfigs.cardActive\n          : isFlippedOutCard\n          ? springConfigs.cardFlyOut\n          : springConfigs.cardDefault,\n      };\n    });\n  };\n\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bindGesture = useDrag(\n    ({\n      args: [index],\n      active,\n      movement: [mx, my],\n      direction: [xDir],\n      velocity: [vx],\n    }) => {\n      if (index !== cardStack.length - 1) return;\n      const trigger = vx > maxVelocity; // If you flick hard enough it should trigger the card to fly out\n\n      // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      if (!active && trigger){\n        flippedOutCards.add(index)\n        animateCard({ index, active: true, mx, xDir, immediate: false });\n      } else {\n        animateCard({ index, active, mx, xDir, immediate: false });\n      } \n\n\n      // If Stack is empty\n      if (!active && cardStack.length === minStackLength) {\n        const t = setTimeout(() => {\n          clearTimeout(t);\n          flippedOutCards.clear();\n          onEmpty();\n        }, debounceTime);\n      }\n    }\n  );\n\n  return (\n    <DeckContext.Provider\n      value={{\n        cardIndex: currentCardIndex - 1,\n        currentDeckSize: cardStack.length,\n        cardStack,\n        containerWidth: _containerWidth,\n        animateCard,\n      }}\n    >\n      <div className=\"react-swipestack-cards__deck\">\n        {children &&\n          cardStack.map((card, i) => {\n            return (\n              <animated.div\n                key={i}\n                ref={deckRef}\n                className={`react-swipestack-cards ${\n                  i === currentCardIndex - 1\n                    ? \"react-swipestack-cards__active-card-wrapper\"\n                    : \"\"\n                } react-swipestack-cards__card-wrapper react-swipestack-card-${i}`}\n                style={{\n                  \"--react-swipestack-cards-id\": i + 1,\n                  \"--react-swipestack-cards-stack-length\": cardStack.length,\n                  x: animationProps[i]?.x,\n                  y: animationProps[i]?.y,\n                  opacity: fadeEffect ? animationProps[i]?.opacity : 1,\n                }}\n              >\n                {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n                <animated.div\n                  {...bindGesture(i)}\n                  className={`${\n                    i === currentCardIndex - 1\n                      ? \"react-swipestack-cards__active-card\"\n                      : \"\"\n                  } react-swipestack-cards__card`}\n                  style={{\n                    touchAction: \"none\",\n                    transform: interpolate(\n                      [animationProps[i]?.rot, animationProps[i]?.scale],\n                      setTransforms\n                    ),\n                  }}\n                >\n                  {children[i]}\n                </animated.div>\n              </animated.div>\n            );\n          })}\n        {LoaderComponent && cardStack.length <= 0 ? <LoaderComponent /> : null}\n      </div>\n    </DeckContext.Provider>\n  );\n}\n\nexport default Deck;\nexport { Card, CardButton };\n","import React, { useState } from 'react'\nimport Deck, { Card, CardButton } from '../components/Deck'\n\nconst fakeData = [\n  {\n    id: 1,\n    img: {\n      src: \"/img/samson-thomas-t0vF_M5Kn7s-unsplash.jpg\",\n      alt: \"Test\"\n    }\n  },\n  {\n    id: 2,\n    img: {\n      src: \"/img/eugenivy_now-XxnBqWJyQ3c-unsplash.jpg\",\n      alt: \"Test\"\n    }\n  },\n  {\n    id: 3,\n    img: {\n      src: \"/img/minh-pham-OtXADkUh3-I-unsplash.jpg\",\n      alt: \"Test\"\n    }\n  },\n  {\n    id: 4,\n    img: {\n      src: \"/img/jennifer-latuperisa-andresen-GM7cm1IC6Ss-unsplash.jpg\",\n      alt: \"Test\"\n    }\n  }\n]\n\nfunction Loader(){\n  return (\n    <div className=\"absolute flex justify-center items-center h-screen w-full\">\n      <div className=\"loader\">Loading...</div>\n    </div>\n  )\n}\n\nfunction CardGameView() {   \n  const [ cards, setCards ] = useState(fakeData)\n\n  const fetchCards = () => {\n    const t = setTimeout(()=>{\n      clearTimeout(t)\n      setCards([...fakeData])\n    }, 1000)\n  }\n\n  const onLike = (card) => {\n    console.log(\"LIKE\", card)\n  }\n\n  const onDislike = (card) => {\n    console.log(\"DISLIKE\", card)\n  }\n\n  return (\n    <div className=\"h-screen w-screen\">\n      <Deck \n        cards={cards} \n        fadeEffect={true}\n        rotationFactor={2.3}\n        transformStartValues={{\n          y: 0,\n          scale: 1.5,\n        }}\n        transformEndValues={{\n          \n        }}\n        LoaderComponent={Loader}\n        onLike={(card) => onLike(card)} \n        onDislike={(card) => onDislike(card)} \n        onEmpty={fetchCards} \n        onChange={({cardStack, currentCard}) => console.log(\"cardStack, currentCard\", cardStack, currentCard)}\n        // onAnimation={({ x, rotation, scale }) => console.log(`Animating card { x: ${x}, rotation: ${rotation}, scale: ${scale}  } `)}\n      >\n        {cards.map(card => (\n          <Card key={card.id} img={card.img} buttonTextLike={'👍'} buttonTextDislike={'👎'}/>\n          // <React.Fragment key={card.id}>\n          //   <h1>test {card.id}</h1>\n          //   <img className=\"react-swipestack-cards__card-img\" src={card.img.src} alt={card.img.alt}/>\n          //   <CardButton type={'dislike'}>dislike</CardButton>\n          //   <CardButton type={'like'}>like</CardButton>\n          // </React.Fragment>\n        ))}\n      </Deck>\n    </div>\n  )\n}\n\nexport default CardGameView\n","import './App.css'\nimport CardGameView from \"./pages/CardGameView\";\n\n\nfunction App() { \n  return (\n    <div className=\"App\">\n      <CardGameView/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}